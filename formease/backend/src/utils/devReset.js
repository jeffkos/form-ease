/**
 * üîß ENDPOINT DE D√âVELOPPEMENT - RESET RATE LIMIT
 * 
 * Script temporaire pour r√©initialiser le rate limiting en d√©veloppement
 */

// Fonction pour r√©initialiser le store global en m√©moire
function resetInMemoryRateLimit() {
    try {
        // Vider le store global utilis√© par le rate limiting
        if (global.__rateLimitStore) {
            console.log('üîÑ R√©initialisation du store rate limit en m√©moire...');
            global.__rateLimitStore = {};
            console.log('‚úÖ Store rate limit vid√©');
            return { success: true, message: 'Rate limit store r√©initialis√©' };
        } else {
            console.log('‚ÑπÔ∏è Aucun store rate limit trouv√©');
            return { success: true, message: 'Aucun rate limit actif' };
        }
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©initialisation:', error);
        return { success: false, error: error.message };
    }
}

// Route temporaire pour le d√©veloppement
function setupResetRoute(app) {
    app.post('/api/admin/reset-rate-limit', (req, res) => {
        try {
            console.log('üîß Demande de r√©initialisation du rate limit re√ßue');
            
            // V√©rifier si c'est en mode d√©veloppement
            if (process.env.NODE_ENV !== 'development') {
                return res.status(403).json({
                    error: 'FORBIDDEN',
                    message: 'Cette fonctionnalit√© n\'est disponible qu\'en d√©veloppement'
                });
            }
            
            // R√©initialiser le store
            const result = resetInMemoryRateLimit();
            
            if (result.success) {
                res.json({
                    success: true,
                    message: result.message,
                    timestamp: new Date().toISOString()
                });
            } else {
                res.status(500).json({
                    error: 'RESET_FAILED',
                    message: result.error
                });
            }
            
        } catch (error) {
            console.error('‚ùå Erreur endpoint reset:', error);
            res.status(500).json({
                error: 'INTERNAL_ERROR',
                message: 'Erreur interne du serveur'
            });
        }
    });
    
    console.log('üîß Route de reset rate limit configur√©e: POST /api/admin/reset-rate-limit');
}

module.exports = {
    resetInMemoryRateLimit,
    setupResetRoute
};
