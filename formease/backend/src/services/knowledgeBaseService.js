const { PrismaClient } = require("@prisma/client");
const winston = require("winston");

const prisma = new PrismaClient();
const logger = winston.createLogger({
  level: "info",
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.File({ filename: "logs/knowledge-base.log" }),
    new winston.transports.Console(),
  ],
});

class KnowledgeBaseService {
  constructor() {
    this.categories = [
      {
        id: "getting-started",
        name: "Premiers pas",
        description: "Guide pour d√©buter avec FormEase",
        icon: "üöÄ",
        order: 1,
      },
      {
        id: "forms",
        name: "Gestion des formulaires",
        description: "Cr√©ation et configuration des formulaires",
        icon: "üìù",
        order: 2,
      },
      {
        id: "payments",
        name: "Paiements",
        description: "Configuration des formulaires payants",
        icon: "üí≥",
        order: 3,
      },
      {
        id: "analytics",
        name: "Analytics",
        description: "Comprendre vos statistiques",
        icon: "üìä",
        order: 4,
      },
      {
        id: "marketing",
        name: "Marketing",
        description: "Campagnes et automation",
        icon: "üìß",
        order: 5,
      },
      {
        id: "troubleshooting",
        name: "D√©pannage",
        description: "Solutions aux probl√®mes courants",
        icon: "üîß",
        order: 6,
      },
      {
        id: "api",
        name: "API",
        description: "Documentation technique",
        icon: "‚öôÔ∏è",
        order: 7,
      },
    ];

    this.articles = [
      // Getting Started
      {
        id: "welcome",
        title: "Bienvenue sur FormEase",
        slug: "bienvenue-sur-formease",
        category: "getting-started",
        content: `
# Bienvenue sur FormEase

FormEase est une plateforme compl√®te de cr√©ation et gestion de formulaires intelligents.

## Fonctionnalit√©s principales

- **Cr√©ation de formulaires** : Interface intuitive avec glisser-d√©poser
- **Formulaires payants** : Int√©gration Stripe pour mon√©tiser vos formulaires
- **Analytics avanc√©es** : Suivi des performances et m√©triques d√©taill√©es
- **Marketing automation** : Campagnes email et automation
- **Gestion des contacts** : Base de donn√©es centralis√©e

## Premiers pas

1. Cr√©ez votre premier formulaire
2. Configurez les notifications
3. Partagez votre formulaire
4. Analysez les r√©sultats

Pour commencer, consultez le guide "Cr√©er votre premier formulaire".
        `,
        tags: ["d√©butant", "introduction", "guide"],
        published: true,
        featured: true,
        views: 0,
        helpful: 0,
        notHelpful: 0,
        lastUpdated: new Date(),
        author: "FormEase Team",
      },
      {
        id: "first-form",
        title: "Cr√©er votre premier formulaire",
        slug: "creer-votre-premier-formulaire",
        category: "getting-started",
        content: `
# Cr√©er votre premier formulaire

Ce guide vous accompagne dans la cr√©ation de votre premier formulaire sur FormEase.

## √âtape 1 : Acc√©der au cr√©ateur

1. Connectez-vous √† votre compte FormEase
2. Cliquez sur "Nouveau formulaire" dans le dashboard
3. Choisissez un template ou partez de z√©ro

## √âtape 2 : Configurer les champs

### Types de champs disponibles :
- **Texte** : Saisie libre
- **Email** : Validation automatique
- **T√©l√©phone** : Format international
- **Choix multiple** : Cases √† cocher
- **S√©lection** : Menu d√©roulant
- **Fichier** : Upload de documents

### Conseils :
- Utilisez des labels clairs
- Rendez obligatoires uniquement les champs essentiels
- Ajoutez des descriptions d'aide si n√©cessaire

## √âtape 3 : Personnaliser l'apparence

- Choisissez un th√®me
- Personnalisez les couleurs
- Ajoutez votre logo
- Configurez le message de confirmation

## √âtape 4 : Publier et partager

1. Cliquez sur "Publier"
2. Copiez le lien de partage
3. Int√©grez le formulaire sur votre site
4. Partagez sur les r√©seaux sociaux

Votre formulaire est maintenant pr√™t √† recevoir des r√©ponses !
        `,
        tags: ["formulaire", "cr√©ation", "guide", "d√©butant"],
        published: true,
        featured: true,
        views: 0,
        helpful: 0,
        notHelpful: 0,
        lastUpdated: new Date(),
        author: "FormEase Team",
      },
      // Forms
      {
        id: "form-settings",
        title: "Configuration avanc√©e des formulaires",
        slug: "configuration-avancee-formulaires",
        category: "forms",
        content: `
# Configuration avanc√©e des formulaires

Explorez les options avanc√©es pour optimiser vos formulaires.

## Param√®tres g√©n√©raux

### Limitations
- **Nombre de r√©ponses** : Limitez le nombre de soumissions
- **P√©riode active** : D√©finissez une date de fin
- **G√©olocalisation** : Restreignez par pays/r√©gion

### Notifications
- **Email admin** : Recevez chaque nouvelle r√©ponse
- **Auto-r√©pondeur** : Message automatique aux utilisateurs
- **Webhooks** : Int√©gration avec vos outils

## Validation des donn√©es

### R√®gles de validation
- **Champs obligatoires** : Marquez les champs essentiels
- **Formats personnalis√©s** : Regex pour validation sp√©cifique
- **Limites de caract√®res** : Min/max pour les textes

### Protection anti-spam
- **Captcha** : Protection automatique
- **Honeypot** : Pi√®ge invisible pour les bots
- **Rate limiting** : Limite de soumissions par IP

## Logique conditionnelle

### Affichage conditionnel
- Montrer/cacher des champs selon les r√©ponses
- Cr√©er des parcours personnalis√©s
- Adapter le formulaire au contexte

### Calculs automatiques
- Sommes et totaux
- Pourcentages
- Formules personnalis√©es

## Int√©grations

### CRM
- Synchronisation automatique des contacts
- Mapping des champs
- D√©duplication

### Email marketing
- Ajout automatique aux listes
- Segmentation par r√©ponses
- D√©clenchement de campagnes

Pour des besoins sp√©cifiques, contactez notre support technique.
        `,
        tags: ["formulaire", "configuration", "avanc√©", "validation"],
        published: true,
        featured: false,
        views: 0,
        helpful: 0,
        notHelpful: 0,
        lastUpdated: new Date(),
        author: "FormEase Team",
      },
      // Payments
      {
        id: "payment-forms",
        title: "Cr√©er des formulaires payants",
        slug: "creer-formulaires-payants",
        category: "payments",
        content: `
# Cr√©er des formulaires payants

Mon√©tisez vos formulaires avec l'int√©gration Stripe.

## Pr√©requis

### Compte Stripe
1. Cr√©ez un compte sur stripe.com
2. Compl√©tez la v√©rification de votre identit√©
3. Configurez vos m√©thodes de paiement

### Configuration FormEase
1. Acc√©dez aux param√®tres de paiement
2. Connectez votre compte Stripe
3. Configurez les webhooks

## Types de formulaires payants

### Paiement unique
- Inscription √† un √©v√©nement
- Achat de produit
- Donation

### Abonnement
- Adh√©sion mensuelle
- Service r√©current
- Acc√®s premium

### Paiement conditionnel
- Montant variable selon les r√©ponses
- Suppl√©ments optionnels
- Remises automatiques

## Configuration du paiement

### Informations requises
- **Montant** : Prix fixe ou calcul√©
- **Devise** : EUR, USD, etc.
- **Description** : Texte sur la facture
- **M√©tadonn√©es** : Informations suppl√©mentaires

### Options avanc√©es
- **Essai gratuit** : P√©riode d'essai pour les abonnements
- **Coupons** : Codes de r√©duction
- **Taxes** : Calcul automatique selon la localisation

## Gestion des paiements

### Suivi des transactions
- Dashboard des paiements
- Statut des transactions
- Historique complet

### Gestion des √©checs
- Retry automatique
- Notifications d'√©chec
- Relance des paiements

### Remboursements
- Remboursement partiel ou total
- Gestion des litiges
- Historique des remboursements

## Conformit√© et s√©curit√©

### PCI DSS
- Conformit√© automatique
- Donn√©es s√©curis√©es
- Audit r√©gulier

### RGPD
- Consentement explicite
- Droit √† l'oubli
- Portabilit√© des donn√©es

Pour plus d'informations sur la configuration Stripe, consultez notre guide technique.
        `,
        tags: ["paiement", "stripe", "mon√©tisation", "abonnement"],
        published: true,
        featured: true,
        views: 0,
        helpful: 0,
        notHelpful: 0,
        lastUpdated: new Date(),
        author: "FormEase Team",
      },
      // Troubleshooting
      {
        id: "common-issues",
        title: "Probl√®mes courants et solutions",
        slug: "problemes-courants-solutions",
        category: "troubleshooting",
        content: `
# Probl√®mes courants et solutions

Solutions aux probl√®mes les plus fr√©quents sur FormEase.

## Formulaires

### Le formulaire ne s'affiche pas
**Causes possibles :**
- Formulaire non publi√©
- Restrictions g√©ographiques
- Probl√®me de cache

**Solutions :**
1. V√©rifiez que le formulaire est publi√©
2. Contr√¥lez les param√®tres de g√©olocalisation
3. Videz le cache de votre navigateur
4. Testez en navigation priv√©e

### Les r√©ponses ne sont pas re√ßues
**Causes possibles :**
- Probl√®me de configuration email
- Filtre anti-spam
- Quota d√©pass√©

**Solutions :**
1. V√©rifiez les param√®tres de notification
2. Contr√¥lez vos dossiers spam
3. V√©rifiez votre quota de formulaires
4. Contactez le support si le probl√®me persiste

## Paiements

### Paiement √©chou√©
**Causes possibles :**
- Carte expir√©e ou invalide
- Fonds insuffisants
- Probl√®me de configuration Stripe

**Solutions :**
1. V√©rifiez les informations de la carte
2. Contactez votre banque
3. Essayez une autre m√©thode de paiement
4. V√©rifiez la configuration Stripe

### Webhook non re√ßu
**Causes possibles :**
- URL de webhook incorrecte
- Probl√®me de r√©seau
- Signature invalide

**Solutions :**
1. V√©rifiez l'URL dans les param√®tres Stripe
2. Testez la connectivit√©
3. R√©g√©n√©rez la cl√© secr√®te
4. Consultez les logs Stripe

## Analytics

### Donn√©es manquantes
**Causes possibles :**
- Filtre de date incorrect
- Probl√®me de synchronisation
- Permissions insuffisantes

**Solutions :**
1. Ajustez les filtres de date
2. Actualisez les donn√©es
3. V√©rifiez vos permissions
4. Contactez l'administrateur

## Performance

### Chargement lent
**Causes possibles :**
- Connexion internet lente
- Trop de champs dans le formulaire
- Probl√®me de serveur

**Solutions :**
1. V√©rifiez votre connexion
2. Simplifiez le formulaire
3. Optimisez les images
4. Contactez le support technique

## Obtenir de l'aide

Si ces solutions ne r√©solvent pas votre probl√®me :

1. **Documentation** : Consultez notre base de connaissances
2. **Support** : Cr√©ez un ticket de support
3. **Communaut√©** : Posez votre question sur le forum
4. **Contact direct** : support@formease.com

Notre √©quipe est disponible 24/7 pour vous aider !
        `,
        tags: ["d√©pannage", "probl√®me", "solution", "support"],
        published: true,
        featured: true,
        views: 0,
        helpful: 0,
        notHelpful: 0,
        lastUpdated: new Date(),
        author: "FormEase Support",
      },
    ];
  }

  /**
   * Obtient toutes les cat√©gories
   */
  getCategories() {
    return this.categories.sort((a, b) => a.order - b.order);
  }

  /**
   * Obtient une cat√©gorie par ID
   */
  getCategoryById(categoryId) {
    return this.categories.find((cat) => cat.id === categoryId);
  }

  /**
   * Obtient tous les articles
   */
  getArticles(options = {}) {
    const {
      category,
      published = true,
      featured,
      limit,
      offset = 0,
      search,
    } = options;

    let articles = [...this.articles];

    // Filtrer par statut publi√©
    if (published !== undefined) {
      articles = articles.filter((article) => article.published === published);
    }

    // Filtrer par cat√©gorie
    if (category) {
      articles = articles.filter((article) => article.category === category);
    }

    // Filtrer par featured
    if (featured !== undefined) {
      articles = articles.filter((article) => article.featured === featured);
    }

    // Recherche textuelle
    if (search) {
      const searchLower = search.toLowerCase();
      articles = articles.filter(
        (article) =>
          article.title.toLowerCase().includes(searchLower) ||
          article.content.toLowerCase().includes(searchLower) ||
          article.tags.some((tag) => tag.toLowerCase().includes(searchLower))
      );
    }

    // Trier par date de mise √† jour (plus r√©cent en premier)
    articles.sort((a, b) => new Date(b.lastUpdated) - new Date(a.lastUpdated));

    // Pagination
    const total = articles.length;
    if (limit) {
      articles = articles.slice(offset, offset + limit);
    }

    return {
      articles,
      total,
      offset,
      limit,
    };
  }

  /**
   * Obtient un article par ID ou slug
   */
  getArticle(identifier) {
    const article = this.articles.find(
      (a) => a.id === identifier || a.slug === identifier
    );

    if (article) {
      // Incr√©menter le compteur de vues
      article.views++;
      logger.info(`Article consult√©: ${article.title}`, {
        id: article.id,
        views: article.views,
      });
    }

    return article;
  }

  /**
   * Recherche dans les articles
   */
  searchArticles(query, options = {}) {
    const { category, limit = 10 } = options;

    if (!query || query.trim().length < 2) {
      return { articles: [], total: 0, query };
    }

    const searchTerms = query
      .toLowerCase()
      .split(" ")
      .filter((term) => term.length > 1);
    let articles = [...this.articles].filter((article) => article.published);

    // Filtrer par cat√©gorie si sp√©cifi√©e
    if (category) {
      articles = articles.filter((article) => article.category === category);
    }

    // Calculer le score de pertinence pour chaque article
    const scoredArticles = articles.map((article) => {
      let score = 0;
      const titleLower = article.title.toLowerCase();
      const contentLower = article.content.toLowerCase();
      const tagsLower = article.tags.join(" ").toLowerCase();

      searchTerms.forEach((term) => {
        // Score pour le titre (poids 3)
        if (titleLower.includes(term)) {
          score += 3;
        }

        // Score pour les tags (poids 2)
        if (tagsLower.includes(term)) {
          score += 2;
        }

        // Score pour le contenu (poids 1)
        if (contentLower.includes(term)) {
          score += 1;
        }

        // Bonus pour correspondance exacte dans le titre
        if (titleLower === term) {
          score += 5;
        }
      });

      return { ...article, score };
    });

    // Filtrer les articles avec un score > 0 et trier par score d√©croissant
    const relevantArticles = scoredArticles
      .filter((article) => article.score > 0)
      .sort((a, b) => b.score - a.score)
      .slice(0, limit);

    logger.info(`Recherche effectu√©e: "${query}"`, {
      results: relevantArticles.length,
      query,
    });

    return {
      articles: relevantArticles,
      total: relevantArticles.length,
      query,
    };
  }

  /**
   * Obtient les articles populaires
   */
  getPopularArticles(limit = 5) {
    return this.articles
      .filter((article) => article.published)
      .sort((a, b) => b.views - a.views)
      .slice(0, limit);
  }

  /**
   * Obtient les articles en vedette
   */
  getFeaturedArticles(limit = 3) {
    return this.articles
      .filter((article) => article.published && article.featured)
      .sort((a, b) => new Date(b.lastUpdated) - new Date(a.lastUpdated))
      .slice(0, limit);
  }

  /**
   * Obtient les articles r√©cents
   */
  getRecentArticles(limit = 5) {
    return this.articles
      .filter((article) => article.published)
      .sort((a, b) => new Date(b.lastUpdated) - new Date(a.lastUpdated))
      .slice(0, limit);
  }

  /**
   * Obtient les articles li√©s
   */
  getRelatedArticles(articleId, limit = 3) {
    const article = this.getArticle(articleId);
    if (!article) return [];

    // Trouver des articles de la m√™me cat√©gorie avec des tags similaires
    const relatedArticles = this.articles
      .filter(
        (a) =>
          a.id !== articleId &&
          a.published &&
          (a.category === article.category ||
            a.tags.some((tag) => article.tags.includes(tag)))
      )
      .sort((a, b) => {
        // Calculer la similarit√© bas√©e sur les tags communs
        const commonTagsA = a.tags.filter((tag) =>
          article.tags.includes(tag)
        ).length;
        const commonTagsB = b.tags.filter((tag) =>
          article.tags.includes(tag)
        ).length;
        return commonTagsB - commonTagsA;
      })
      .slice(0, limit);

    return relatedArticles;
  }

  /**
   * Marque un article comme utile
   */
  markArticleHelpful(articleId, helpful = true) {
    const article = this.articles.find((a) => a.id === articleId);
    if (article) {
      if (helpful) {
        article.helpful++;
      } else {
        article.notHelpful++;
      }

      logger.info(`Article marqu√© comme ${helpful ? "utile" : "non utile"}`, {
        id: articleId,
        helpful: article.helpful,
        notHelpful: article.notHelpful,
      });

      return {
        helpful: article.helpful,
        notHelpful: article.notHelpful,
        total: article.helpful + article.notHelpful,
      };
    }

    return null;
  }

  /**
   * Obtient les statistiques de la base de connaissances
   */
  getStats() {
    const totalArticles = this.articles.length;
    const publishedArticles = this.articles.filter((a) => a.published).length;
    const totalViews = this.articles.reduce((sum, a) => sum + a.views, 0);
    const totalHelpful = this.articles.reduce((sum, a) => sum + a.helpful, 0);
    const totalNotHelpful = this.articles.reduce(
      (sum, a) => sum + a.notHelpful,
      0
    );

    const categoryStats = this.categories.map((category) => {
      const categoryArticles = this.articles.filter(
        (a) => a.category === category.id
      );
      return {
        ...category,
        articleCount: categoryArticles.length,
        publishedCount: categoryArticles.filter((a) => a.published).length,
        totalViews: categoryArticles.reduce((sum, a) => sum + a.views, 0),
      };
    });

    return {
      totalArticles,
      publishedArticles,
      totalViews,
      totalHelpful,
      totalNotHelpful,
      helpfulRatio:
        totalHelpful + totalNotHelpful > 0
          ? (totalHelpful / (totalHelpful + totalNotHelpful)) * 100
          : 0,
      categories: categoryStats,
      mostViewedArticles: this.getPopularArticles(5),
      recentArticles: this.getRecentArticles(5),
    };
  }
}

module.exports = new KnowledgeBaseService();
