#!/usr/bin/env node

/**
 * Script pour g√©n√©rer des cl√©s JWT s√©curis√©es et mettre √† jour .env
 * Usage: node generate-jwt-secret.js
 */

const crypto = require('crypto');
const fs = require('fs');
const path = require('path');

function generateJWTSecret() {
  // G√©n√®re une cl√© de 64 caract√®res (512 bits)
  return crypto.randomBytes(32).toString('hex');
}

function generateSecurePassword() {
  // G√©n√®re un mot de passe s√©curis√©
  const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
  let password = '';
  for (let i = 0; i < 24; i++) {
    password += charset.charAt(Math.floor(Math.random() * charset.length));
  }
  return password;
}

function updateEnvFile() {
  const envPath = path.join(__dirname, '..', '.env');
  
  try {
    // Lire le fichier .env existant
    let envContent = '';
    if (fs.existsSync(envPath)) {
      envContent = fs.readFileSync(envPath, 'utf8');
    }
    
    // G√©n√©rer nouvelle cl√© JWT
    const newJWTSecret = generateJWTSecret();
    
    // Mettre √† jour ou ajouter JWT_SECRET
    if (envContent.includes('JWT_SECRET=')) {
      envContent = envContent.replace(
        /JWT_SECRET=.*/,
        `JWT_SECRET="${newJWTSecret}"`
      );
      console.log('‚úÖ JWT_SECRET mis √† jour dans .env');
    } else {
      envContent += `\nJWT_SECRET="${newJWTSecret}"\n`;
      console.log('‚úÖ JWT_SECRET ajout√© √† .env');
    }
    
    // Sauvegarder le fichier
    fs.writeFileSync(envPath, envContent);
    
    return newJWTSecret;
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour du fichier .env:', error.message);
    return null;
  }
}

// Fonction principale
function main() {
  console.log('üîê G√©n√©rateur de Cl√©s S√©curis√©es pour FormEase\n');
  
  // Mise √† jour automatique du fichier .env
  const jwtSecret = updateEnvFile();
  
  if (jwtSecret) {
    console.log('ÔøΩ Nouvelle cl√© JWT g√©n√©r√©e et sauvegard√©e');
  } else {
    console.log('‚ö†Ô∏è G√©n√©ration manuelle de cl√© JWT:');
    console.log(`JWT_SECRET="${generateJWTSecret()}"`);
  }
  
  console.log('\nüìã Autres valeurs utiles:\n');
  console.log('# Mot de passe s√©curis√© pour admin');
  console.log(`ADMIN_PASSWORD="${generateSecurePassword()}"`);
  
  console.log('\n# Cl√© de chiffrement pour cookies');
  console.log(`COOKIE_SECRET="${crypto.randomBytes(16).toString('hex')}"`);
  
  console.log('\n‚úÖ Configuration de s√©curit√© g√©n√©r√©e !');
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  main();
}

module.exports = {
  generateJWTSecret,
  generateSecurePassword,
  updateEnvFile
};
console.log(`JWT_SECRET="${generateJWTSecret()}"`);
console.log('');

console.log('# Exemple de mot de passe s√©curis√© pour la base de donn√©es');
console.log(`# DB_PASSWORD="${generateSecurePassword()}"`);
console.log('');

console.log('# Exemple de mot de passe s√©curis√© pour SMTP');
console.log(`# SMTP_PASS="${generateSecurePassword()}"`);
console.log('');

console.log('‚ö†Ô∏è  IMPORTANT:');
console.log('- Gardez ces cl√©s secr√®tes et ne les partagez jamais');
console.log('- Utilisez des valeurs diff√©rentes pour chaque environnement');
console.log('- Stockez-les de mani√®re s√©curis√©e (gestionnaire de mots de passe)');
