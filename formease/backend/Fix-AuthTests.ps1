# Script PowerShell de correction finale - Authentication JWT Tests
# Usage: .\Fix-AuthTests.ps1

param(
    [switch]$DryRun = $false
)

Write-Host "üîß CORRECTION FINALE - AUTHENTIFICATION TESTS FORMEASE" -ForegroundColor Green
Write-Host "=================================================="

# V√©rifier qu'on est dans le bon r√©pertoire
if (-not (Test-Path "package.json")) {
    Write-Host "‚ùå Erreur: Ex√©cutez ce script depuis le r√©pertoire backend" -ForegroundColor Red
    exit 1
}

Write-Host "üìã √âtape 1: V√©rification de l'environnement de test..." -ForegroundColor Cyan

# V√©rifier JWT_SECRET dans setup.js
$setupFile = "tests\setup.js"
if (Test-Path $setupFile) {
    $setupContent = Get-Content $setupFile -Raw
    if ($setupContent -notmatch "JWT_SECRET.*test-secret") {
        Write-Host "üîß Configuration JWT_SECRET dans setup.js..." -ForegroundColor Yellow
        if (-not $DryRun) {
            $newContent = 'process.env.JWT_SECRET = process.env.JWT_SECRET || "test-secret-key-for-development-only";' + "`n" + $setupContent
            Set-Content -Path $setupFile -Value $newContent -Encoding UTF8
        }
    } else {
        Write-Host "‚úÖ JWT_SECRET d√©j√† configur√© dans setup.js" -ForegroundColor Green
    }
} else {
    Write-Host "‚ö†Ô∏è  Fichier setup.js non trouv√©" -ForegroundColor Yellow
}

Write-Host "üìã √âtape 2: Correction des tokens JWT dans les tests..." -ForegroundColor Cyan

# Fonction pour corriger les tokens dans un fichier de test
function Fix-JWTTokens {
    param($FilePath)
    
    Write-Host "  üîß Correction tokens dans $FilePath..." -ForegroundColor Yellow
    
    if (-not $DryRun) {
        $content = Get-Content $FilePath -Raw
        
        # Ajouter l'import JWT si manquant
        if ($content -notmatch "require.*jsonwebtoken") {
            $content = "const jwt = require('jsonwebtoken');`n" + $content
        }
        
        # Corriger les anciens tokens
        $content = $content -replace "Bearer.*?'", "Bearer ' + jwt.sign({ id: 1, role: 'ADMIN' }, process.env.JWT_SECRET, { expiresIn: '1h' })"
        
        Set-Content -Path $FilePath -Value $content -Encoding UTF8
    }
}

# Corriger les principaux fichiers de test
$testFiles = Get-ChildItem -Path "tests" -Filter "*.test.js"
foreach ($testFile in $testFiles) {
    Fix-JWTTokens -FilePath $testFile.FullName
}

Write-Host "üìã √âtape 3: Correction du middleware auth pour les tests..." -ForegroundColor Cyan

$authFile = "src\middleware\auth.js"
if (Test-Path $authFile) {
    $authContent = Get-Content $authFile -Raw
    if ($authContent -notmatch "module\.exports\.authMiddleware") {
        Write-Host "üîß Ajout export named dans auth middleware..." -ForegroundColor Yellow
        if (-not $DryRun) {
            $authContent += "`n`nmodule.exports.authMiddleware = authMiddleware;"
            Set-Content -Path $authFile -Value $authContent -Encoding UTF8
        }
    } else {
        Write-Host "‚úÖ Export named d√©j√† pr√©sent dans auth middleware" -ForegroundColor Green
    }
}

Write-Host "üìã √âtape 4: Cr√©ation du helper de test..." -ForegroundColor Cyan

$testHelperContent = @"
const jwt = require('jsonwebtoken');

// Configuration environnement de test
process.env.NODE_ENV = 'test';
process.env.JWT_SECRET = process.env.JWT_SECRET || 'test-secret-key-for-development-only';
process.env.DATABASE_URL = process.env.DATABASE_URL || 'postgresql://test:test@localhost:5432/test';

// Helper pour g√©n√©rer des tokens JWT valides
global.generateTestToken = (payload = { id: 1, role: 'ADMIN' }) => {
  return jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '1h' });
};

// Helper pour headers d'authentification
global.getAuthHeader = (payload) => {
  return { Authorization: `Bearer `${generateTestToken(payload)} };
};

console.log('‚úÖ Test helpers loaded');
"@

if (-not $DryRun) {
    Set-Content -Path "tests\test-helper.js" -Value $testHelperContent -Encoding UTF8
}
Write-Host "‚úÖ Helper de test cr√©√©" -ForegroundColor Green

Write-Host "üìã √âtape 5: Mise √† jour jest.config.js..." -ForegroundColor Cyan

$jestConfigContent = @"
module.exports = {
  testEnvironment: 'node',
  setupFilesAfterEnv: ['<rootDir>/tests/setup.js', '<rootDir>/tests/test-helper.js'],
  testMatch: ['**/tests/**/*.test.js'],
  collectCoverage: false,
  verbose: true,
  forceExit: true,
  clearMocks: true,
  resetMocks: true,
  restoreMocks: true,
  testTimeout: 30000
};
"@

if (-not $DryRun) {
    Set-Content -Path "jest.config.js" -Value $jestConfigContent -Encoding UTF8
}
Write-Host "‚úÖ Configuration Jest mise √† jour" -ForegroundColor Green

Write-Host "üìã √âtape 6: Test de validation..." -ForegroundColor Cyan

if (-not $DryRun) {
    Write-Host "üß™ Lancement d'un test simple pour validation..." -ForegroundColor Yellow
    try {
        $testResult = & npm test -- --testPathPattern=auth-simple.test.js 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Test de base r√©ussi!" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è  Test de base √©chou√©, v√©rifiez la sortie ci-dessus" -ForegroundColor Yellow
        }
    }
    catch {
        Write-Host "‚ö†Ô∏è  Erreur lors du test: $_" -ForegroundColor Yellow
    }
}

Write-Host "üìã √âtape 7: Nettoyage console.log..." -ForegroundColor Cyan

if (Test-Path "scripts\Clean-ConsoleLogs.ps1") {
    Write-Host "üßπ Ex√©cution du nettoyage console.log..." -ForegroundColor Yellow
    if (-not $DryRun) {
        & .\scripts\Clean-ConsoleLogs.ps1
    }
} else {
    Write-Host "‚ö†Ô∏è  Script de nettoyage console.log non trouv√©" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üéØ CORRECTIONS APPLIQU√âES:" -ForegroundColor Green
Write-Host "  ‚úÖ JWT_SECRET configur√© pour les tests" -ForegroundColor White
Write-Host "  ‚úÖ Tokens JWT corrig√©s dans les fichiers de test" -ForegroundColor White
Write-Host "  ‚úÖ Middleware auth am√©lior√©" -ForegroundColor White
Write-Host "  ‚úÖ Helper de test cr√©√©" -ForegroundColor White
Write-Host "  ‚úÖ Configuration Jest optimis√©e" -ForegroundColor White
Write-Host "  ‚úÖ Nettoyage console.log ex√©cut√©" -ForegroundColor White

Write-Host ""
Write-Host "üöÄ PROCHAINES √âTAPES:" -ForegroundColor Blue
Write-Host "  1. Ex√©cutez: npm test -- --testPathPattern=contact" -ForegroundColor White
Write-Host "  2. Si succ√®s: npm test (tous les tests)" -ForegroundColor White
Write-Host "  3. V√©rifiez le coverage: npm run test:coverage" -ForegroundColor White

Write-Host ""
Write-Host "üí° AIDE AU DEBUG:" -ForegroundColor Blue
Write-Host "  - Test specific: npm test -- --testNamePattern='cr√©e un contact'" -ForegroundColor White
Write-Host "  - Variables env: Get-ChildItem Env: | Where-Object {$_.Name -match 'JWT|NODE_ENV'}" -ForegroundColor White
Write-Host "  - Verbose: npm test -- --verbose" -ForegroundColor White

if ($DryRun) {
    Write-Host ""
    Write-Host "üîç Mode DRY RUN activ√© - Aucune modification appliqu√©e" -ForegroundColor Cyan
    Write-Host "   Relancez sans -DryRun pour appliquer les corrections" -ForegroundColor White
}

Write-Host ""
Write-Host "‚ú® Script termin√© avec succ√®s!" -ForegroundColor Green
